@page "/Account/Login"

@inherits AuthStateComponentBase

@using System.ComponentModel.DataAnnotations
@using BlazorGoogleAuth.Authorization
@using BlazorServerApp.Data
@using BlazorServerApp.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using BlazorGoogleAuth.Data
@using System.Security.Claims

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@* @attribute [AllowAnonymous] *@
@inject IUserService UserService
<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    
    @if (isAuthenticated)
    {
        <p>You are already logged in hybrid auth.</p>
    }
    else
    {
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <h2>Use a local account to log in.</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>                    
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>
                </EditForm>
            </section>
        </div>
        <div class="col-md-6 col-md-offset-2">
            <section>
                <h3>Use another service to log in.</h3>
                <hr />
                <a href="/external-login-picker">Use another service to log in</a>
            </section>
        </div>
    }
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private bool isAuthenticated;
    private string[] roles;

   

    public async Task LoginUser()
    {
        var result = await UserService.LoginAsync(new User() { EmailAddress = Input.Email, Password = Input.Password });


        if (!string.IsNullOrEmpty(result))
        {
            HybridAuthService.SetAccessToken(result);
            HybridAuthService.SetAuthenticationState(true);
            isAuthenticated= true;
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
